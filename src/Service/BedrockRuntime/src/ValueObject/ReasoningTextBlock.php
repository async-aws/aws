<?php

namespace AsyncAws\BedrockRuntime\ValueObject;

use AsyncAws\Core\Exception\InvalidArgument;

/**
 * Contains the reasoning that the model used to return the output.
 */
final class ReasoningTextBlock
{
    /**
     * The reasoning that the model used to return the output.
     *
     * @var string
     */
    private $text;

    /**
     * A token that verifies that the reasoning text was generated by the model. If you pass a reasoning block back to the
     * API in a multi-turn conversation, include the text and its signature unmodified.
     *
     * @var string|null
     */
    private $signature;

    /**
     * @param array{
     *   text: string,
     *   signature?: null|string,
     * } $input
     */
    public function __construct(array $input)
    {
        $this->text = $input['text'] ?? $this->throwException(new InvalidArgument('Missing required field "text".'));
        $this->signature = $input['signature'] ?? null;
    }

    /**
     * @param array{
     *   text: string,
     *   signature?: null|string,
     * }|ReasoningTextBlock $input
     */
    public static function create($input): self
    {
        return $input instanceof self ? $input : new self($input);
    }

    public function getSignature(): ?string
    {
        return $this->signature;
    }

    public function getText(): string
    {
        return $this->text;
    }

    /**
     * @internal
     */
    public function requestBody(): array
    {
        $payload = [];
        $v = $this->text;
        $payload['text'] = $v;
        if (null !== $v = $this->signature) {
            $payload['signature'] = $v;
        }

        return $payload;
    }

    /**
     * @return never
     */
    private function throwException(\Throwable $exception)
    {
        throw $exception;
    }
}
