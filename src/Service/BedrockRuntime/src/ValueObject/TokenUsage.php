<?php

namespace AsyncAws\BedrockRuntime\ValueObject;

use AsyncAws\Core\Exception\InvalidArgument;

/**
 * The tokens used in a message API inference call.
 */
final class TokenUsage
{
    /**
     * The number of tokens sent in the request to the model.
     *
     * @var int
     */
    private $inputTokens;

    /**
     * The number of tokens that the model generated for the request.
     *
     * @var int
     */
    private $outputTokens;

    /**
     * The total of input tokens and tokens generated by the model.
     *
     * @var int
     */
    private $totalTokens;

    /**
     * @param array{
     *   inputTokens: int,
     *   outputTokens: int,
     *   totalTokens: int,
     * } $input
     */
    public function __construct(array $input)
    {
        $this->inputTokens = $input['inputTokens'] ?? $this->throwException(new InvalidArgument('Missing required field "inputTokens".'));
        $this->outputTokens = $input['outputTokens'] ?? $this->throwException(new InvalidArgument('Missing required field "outputTokens".'));
        $this->totalTokens = $input['totalTokens'] ?? $this->throwException(new InvalidArgument('Missing required field "totalTokens".'));
    }

    /**
     * @param array{
     *   inputTokens: int,
     *   outputTokens: int,
     *   totalTokens: int,
     * }|TokenUsage $input
     */
    public static function create($input): self
    {
        return $input instanceof self ? $input : new self($input);
    }

    public function getInputTokens(): int
    {
        return $this->inputTokens;
    }

    public function getOutputTokens(): int
    {
        return $this->outputTokens;
    }

    public function getTotalTokens(): int
    {
        return $this->totalTokens;
    }

    /**
     * @return never
     */
    private function throwException(\Throwable $exception)
    {
        throw $exception;
    }
}
