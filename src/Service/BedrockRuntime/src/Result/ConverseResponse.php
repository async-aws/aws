<?php

namespace AsyncAws\BedrockRuntime\Result;

use AsyncAws\BedrockRuntime\Enum\GuardrailConverseContentQualifier;
use AsyncAws\BedrockRuntime\Enum\StopReason;
use AsyncAws\BedrockRuntime\ValueObject\ContentBlock;
use AsyncAws\BedrockRuntime\ValueObject\ConverseMetrics;
use AsyncAws\BedrockRuntime\ValueObject\ConverseOutput;
use AsyncAws\BedrockRuntime\ValueObject\ConverseTrace;
use AsyncAws\BedrockRuntime\ValueObject\Document;
use AsyncAws\BedrockRuntime\ValueObject\DocumentBlock;
use AsyncAws\BedrockRuntime\ValueObject\DocumentSource;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailAssessment;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailContentFilter;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailContentPolicyAssessment;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailContextualGroundingFilter;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailContextualGroundingPolicyAssessment;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailConverseContentBlock;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailConverseImageBlock;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailConverseImageSource;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailConverseTextBlock;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailCoverage;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailCustomWord;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailImageCoverage;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailInvocationMetrics;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailManagedWord;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailPiiEntityFilter;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailRegexFilter;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailSensitiveInformationPolicyAssessment;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailTextCharactersCoverage;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailTopic;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailTopicPolicyAssessment;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailTraceAssessment;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailUsage;
use AsyncAws\BedrockRuntime\ValueObject\GuardrailWordPolicyAssessment;
use AsyncAws\BedrockRuntime\ValueObject\ImageBlock;
use AsyncAws\BedrockRuntime\ValueObject\ImageSource;
use AsyncAws\BedrockRuntime\ValueObject\Message;
use AsyncAws\BedrockRuntime\ValueObject\PerformanceConfiguration;
use AsyncAws\BedrockRuntime\ValueObject\PromptRouterTrace;
use AsyncAws\BedrockRuntime\ValueObject\ReasoningContentBlock;
use AsyncAws\BedrockRuntime\ValueObject\ReasoningTextBlock;
use AsyncAws\BedrockRuntime\ValueObject\S3Location;
use AsyncAws\BedrockRuntime\ValueObject\TokenUsage;
use AsyncAws\BedrockRuntime\ValueObject\ToolResultBlock;
use AsyncAws\BedrockRuntime\ValueObject\ToolResultContentBlock;
use AsyncAws\BedrockRuntime\ValueObject\ToolUseBlock;
use AsyncAws\BedrockRuntime\ValueObject\VideoBlock;
use AsyncAws\BedrockRuntime\ValueObject\VideoSource;
use AsyncAws\Core\Response;
use AsyncAws\Core\Result;

class ConverseResponse extends Result
{
    /**
     * The result from the call to `Converse`.
     *
     * @var ConverseOutput
     */
    private $output;

    /**
     * The reason why the model stopped generating output.
     *
     * @var StopReason::*
     */
    private $stopReason;

    /**
     * The total number of tokens used in the call to `Converse`. The total includes the tokens input to the model and the
     * tokens generated by the model.
     *
     * @var TokenUsage
     */
    private $usage;

    /**
     * Metrics for the call to `Converse`.
     *
     * @var ConverseMetrics
     */
    private $metrics;

    /**
     * Additional fields in the response that are unique to the model.
     *
     * @var Document|null
     */
    private $additionalModelResponseFields;

    /**
     * A trace object that contains information about the Guardrail behavior.
     *
     * @var ConverseTrace|null
     */
    private $trace;

    /**
     * Model performance settings for the request.
     *
     * @var PerformanceConfiguration|null
     */
    private $performanceConfig;

    public function getAdditionalModelResponseFields(): ?Document
    {
        $this->initialize();

        return $this->additionalModelResponseFields;
    }

    public function getMetrics(): ConverseMetrics
    {
        $this->initialize();

        return $this->metrics;
    }

    public function getOutput(): ConverseOutput
    {
        $this->initialize();

        return $this->output;
    }

    public function getPerformanceConfig(): ?PerformanceConfiguration
    {
        $this->initialize();

        return $this->performanceConfig;
    }

    /**
     * @return StopReason::*
     */
    public function getStopReason(): string
    {
        $this->initialize();

        return $this->stopReason;
    }

    public function getTrace(): ?ConverseTrace
    {
        $this->initialize();

        return $this->trace;
    }

    public function getUsage(): TokenUsage
    {
        $this->initialize();

        return $this->usage;
    }

    protected function populateResult(Response $response): void
    {
        $data = $response->toArray();

        $this->output = $this->populateResultConverseOutput($data['output']);
        $this->stopReason = (string) $data['stopReason'];
        $this->usage = $this->populateResultTokenUsage($data['usage']);
        $this->metrics = $this->populateResultConverseMetrics($data['metrics']);
        $this->additionalModelResponseFields = empty($data['additionalModelResponseFields']) ? null : $this->populateResultDocument($data['additionalModelResponseFields']);
        $this->trace = empty($data['trace']) ? null : $this->populateResultConverseTrace($data['trace']);
        $this->performanceConfig = empty($data['performanceConfig']) ? null : $this->populateResultPerformanceConfiguration($data['performanceConfig']);
    }

    private function populateResultContentBlock(array $json): ContentBlock
    {
        return new ContentBlock([
            'text' => isset($json['text']) ? (string) $json['text'] : null,
            'image' => empty($json['image']) ? null : $this->populateResultImageBlock($json['image']),
            'document' => empty($json['document']) ? null : $this->populateResultDocumentBlock($json['document']),
            'video' => empty($json['video']) ? null : $this->populateResultVideoBlock($json['video']),
            'toolUse' => empty($json['toolUse']) ? null : $this->populateResultToolUseBlock($json['toolUse']),
            'toolResult' => empty($json['toolResult']) ? null : $this->populateResultToolResultBlock($json['toolResult']),
            'guardContent' => empty($json['guardContent']) ? null : $this->populateResultGuardrailConverseContentBlock($json['guardContent']),
            'reasoningContent' => empty($json['reasoningContent']) ? null : $this->populateResultReasoningContentBlock($json['reasoningContent']),
        ]);
    }

    /**
     * @return ContentBlock[]
     */
    private function populateResultContentBlocks(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultContentBlock($item);
        }

        return $items;
    }

    private function populateResultConverseMetrics(array $json): ConverseMetrics
    {
        return new ConverseMetrics([
            'latencyMs' => (int) $json['latencyMs'],
        ]);
    }

    private function populateResultConverseOutput(array $json): ConverseOutput
    {
        return new ConverseOutput([
            'message' => empty($json['message']) ? null : $this->populateResultMessage($json['message']),
        ]);
    }

    private function populateResultConverseTrace(array $json): ConverseTrace
    {
        return new ConverseTrace([
            'guardrail' => empty($json['guardrail']) ? null : $this->populateResultGuardrailTraceAssessment($json['guardrail']),
            'promptRouter' => empty($json['promptRouter']) ? null : $this->populateResultPromptRouterTrace($json['promptRouter']),
        ]);
    }

    private function populateResultDocument(array $json): Document
    {
        return new Document([
        ]);
    }

    private function populateResultDocumentBlock(array $json): DocumentBlock
    {
        return new DocumentBlock([
            'format' => (string) $json['format'],
            'name' => (string) $json['name'],
            'source' => $this->populateResultDocumentSource($json['source']),
        ]);
    }

    private function populateResultDocumentSource(array $json): DocumentSource
    {
        return new DocumentSource([
            'bytes' => isset($json['bytes']) ? base64_decode((string) $json['bytes']) : null,
        ]);
    }

    private function populateResultGuardrailAssessment(array $json): GuardrailAssessment
    {
        return new GuardrailAssessment([
            'topicPolicy' => empty($json['topicPolicy']) ? null : $this->populateResultGuardrailTopicPolicyAssessment($json['topicPolicy']),
            'contentPolicy' => empty($json['contentPolicy']) ? null : $this->populateResultGuardrailContentPolicyAssessment($json['contentPolicy']),
            'wordPolicy' => empty($json['wordPolicy']) ? null : $this->populateResultGuardrailWordPolicyAssessment($json['wordPolicy']),
            'sensitiveInformationPolicy' => empty($json['sensitiveInformationPolicy']) ? null : $this->populateResultGuardrailSensitiveInformationPolicyAssessment($json['sensitiveInformationPolicy']),
            'contextualGroundingPolicy' => empty($json['contextualGroundingPolicy']) ? null : $this->populateResultGuardrailContextualGroundingPolicyAssessment($json['contextualGroundingPolicy']),
            'invocationMetrics' => empty($json['invocationMetrics']) ? null : $this->populateResultGuardrailInvocationMetrics($json['invocationMetrics']),
        ]);
    }

    /**
     * @return GuardrailAssessment[]
     */
    private function populateResultGuardrailAssessmentList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailAssessment($item);
        }

        return $items;
    }

    /**
     * @return array<string, GuardrailAssessment[]>
     */
    private function populateResultGuardrailAssessmentListMap(array $json): array
    {
        $items = [];
        foreach ($json as $name => $value) {
            $items[(string) $name] = $this->populateResultGuardrailAssessmentList($value);
        }

        return $items;
    }

    /**
     * @return array<string, GuardrailAssessment>
     */
    private function populateResultGuardrailAssessmentMap(array $json): array
    {
        $items = [];
        foreach ($json as $name => $value) {
            $items[(string) $name] = $this->populateResultGuardrailAssessment($value);
        }

        return $items;
    }

    private function populateResultGuardrailContentFilter(array $json): GuardrailContentFilter
    {
        return new GuardrailContentFilter([
            'type' => (string) $json['type'],
            'confidence' => (string) $json['confidence'],
            'filterStrength' => isset($json['filterStrength']) ? (string) $json['filterStrength'] : null,
            'action' => (string) $json['action'],
        ]);
    }

    /**
     * @return GuardrailContentFilter[]
     */
    private function populateResultGuardrailContentFilterList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailContentFilter($item);
        }

        return $items;
    }

    private function populateResultGuardrailContentPolicyAssessment(array $json): GuardrailContentPolicyAssessment
    {
        return new GuardrailContentPolicyAssessment([
            'filters' => $this->populateResultGuardrailContentFilterList($json['filters']),
        ]);
    }

    private function populateResultGuardrailContextualGroundingFilter(array $json): GuardrailContextualGroundingFilter
    {
        return new GuardrailContextualGroundingFilter([
            'type' => (string) $json['type'],
            'threshold' => (float) $json['threshold'],
            'score' => (float) $json['score'],
            'action' => (string) $json['action'],
        ]);
    }

    /**
     * @return GuardrailContextualGroundingFilter[]
     */
    private function populateResultGuardrailContextualGroundingFilters(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailContextualGroundingFilter($item);
        }

        return $items;
    }

    private function populateResultGuardrailContextualGroundingPolicyAssessment(array $json): GuardrailContextualGroundingPolicyAssessment
    {
        return new GuardrailContextualGroundingPolicyAssessment([
            'filters' => !isset($json['filters']) ? null : $this->populateResultGuardrailContextualGroundingFilters($json['filters']),
        ]);
    }

    private function populateResultGuardrailConverseContentBlock(array $json): GuardrailConverseContentBlock
    {
        return new GuardrailConverseContentBlock([
            'text' => empty($json['text']) ? null : $this->populateResultGuardrailConverseTextBlock($json['text']),
            'image' => empty($json['image']) ? null : $this->populateResultGuardrailConverseImageBlock($json['image']),
        ]);
    }

    /**
     * @return list<GuardrailConverseContentQualifier::*>
     */
    private function populateResultGuardrailConverseContentQualifierList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $a = isset($item) ? (string) $item : null;
            if (null !== $a) {
                $items[] = $a;
            }
        }

        return $items;
    }

    private function populateResultGuardrailConverseImageBlock(array $json): GuardrailConverseImageBlock
    {
        return new GuardrailConverseImageBlock([
            'format' => (string) $json['format'],
            'source' => $this->populateResultGuardrailConverseImageSource($json['source']),
        ]);
    }

    private function populateResultGuardrailConverseImageSource(array $json): GuardrailConverseImageSource
    {
        return new GuardrailConverseImageSource([
            'bytes' => isset($json['bytes']) ? base64_decode((string) $json['bytes']) : null,
        ]);
    }

    private function populateResultGuardrailConverseTextBlock(array $json): GuardrailConverseTextBlock
    {
        return new GuardrailConverseTextBlock([
            'text' => (string) $json['text'],
            'qualifiers' => !isset($json['qualifiers']) ? null : $this->populateResultGuardrailConverseContentQualifierList($json['qualifiers']),
        ]);
    }

    private function populateResultGuardrailCoverage(array $json): GuardrailCoverage
    {
        return new GuardrailCoverage([
            'textCharacters' => empty($json['textCharacters']) ? null : $this->populateResultGuardrailTextCharactersCoverage($json['textCharacters']),
            'images' => empty($json['images']) ? null : $this->populateResultGuardrailImageCoverage($json['images']),
        ]);
    }

    private function populateResultGuardrailCustomWord(array $json): GuardrailCustomWord
    {
        return new GuardrailCustomWord([
            'match' => (string) $json['match'],
            'action' => (string) $json['action'],
        ]);
    }

    /**
     * @return GuardrailCustomWord[]
     */
    private function populateResultGuardrailCustomWordList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailCustomWord($item);
        }

        return $items;
    }

    private function populateResultGuardrailImageCoverage(array $json): GuardrailImageCoverage
    {
        return new GuardrailImageCoverage([
            'guarded' => isset($json['guarded']) ? (int) $json['guarded'] : null,
            'total' => isset($json['total']) ? (int) $json['total'] : null,
        ]);
    }

    private function populateResultGuardrailInvocationMetrics(array $json): GuardrailInvocationMetrics
    {
        return new GuardrailInvocationMetrics([
            'guardrailProcessingLatency' => isset($json['guardrailProcessingLatency']) ? (int) $json['guardrailProcessingLatency'] : null,
            'usage' => empty($json['usage']) ? null : $this->populateResultGuardrailUsage($json['usage']),
            'guardrailCoverage' => empty($json['guardrailCoverage']) ? null : $this->populateResultGuardrailCoverage($json['guardrailCoverage']),
        ]);
    }

    private function populateResultGuardrailManagedWord(array $json): GuardrailManagedWord
    {
        return new GuardrailManagedWord([
            'match' => (string) $json['match'],
            'type' => (string) $json['type'],
            'action' => (string) $json['action'],
        ]);
    }

    /**
     * @return GuardrailManagedWord[]
     */
    private function populateResultGuardrailManagedWordList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailManagedWord($item);
        }

        return $items;
    }

    private function populateResultGuardrailPiiEntityFilter(array $json): GuardrailPiiEntityFilter
    {
        return new GuardrailPiiEntityFilter([
            'match' => (string) $json['match'],
            'type' => (string) $json['type'],
            'action' => (string) $json['action'],
        ]);
    }

    /**
     * @return GuardrailPiiEntityFilter[]
     */
    private function populateResultGuardrailPiiEntityFilterList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailPiiEntityFilter($item);
        }

        return $items;
    }

    private function populateResultGuardrailRegexFilter(array $json): GuardrailRegexFilter
    {
        return new GuardrailRegexFilter([
            'name' => isset($json['name']) ? (string) $json['name'] : null,
            'match' => isset($json['match']) ? (string) $json['match'] : null,
            'regex' => isset($json['regex']) ? (string) $json['regex'] : null,
            'action' => (string) $json['action'],
        ]);
    }

    /**
     * @return GuardrailRegexFilter[]
     */
    private function populateResultGuardrailRegexFilterList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailRegexFilter($item);
        }

        return $items;
    }

    private function populateResultGuardrailSensitiveInformationPolicyAssessment(array $json): GuardrailSensitiveInformationPolicyAssessment
    {
        return new GuardrailSensitiveInformationPolicyAssessment([
            'piiEntities' => $this->populateResultGuardrailPiiEntityFilterList($json['piiEntities']),
            'regexes' => $this->populateResultGuardrailRegexFilterList($json['regexes']),
        ]);
    }

    private function populateResultGuardrailTextCharactersCoverage(array $json): GuardrailTextCharactersCoverage
    {
        return new GuardrailTextCharactersCoverage([
            'guarded' => isset($json['guarded']) ? (int) $json['guarded'] : null,
            'total' => isset($json['total']) ? (int) $json['total'] : null,
        ]);
    }

    private function populateResultGuardrailTopic(array $json): GuardrailTopic
    {
        return new GuardrailTopic([
            'name' => (string) $json['name'],
            'type' => (string) $json['type'],
            'action' => (string) $json['action'],
        ]);
    }

    /**
     * @return GuardrailTopic[]
     */
    private function populateResultGuardrailTopicList(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultGuardrailTopic($item);
        }

        return $items;
    }

    private function populateResultGuardrailTopicPolicyAssessment(array $json): GuardrailTopicPolicyAssessment
    {
        return new GuardrailTopicPolicyAssessment([
            'topics' => $this->populateResultGuardrailTopicList($json['topics']),
        ]);
    }

    private function populateResultGuardrailTraceAssessment(array $json): GuardrailTraceAssessment
    {
        return new GuardrailTraceAssessment([
            'modelOutput' => !isset($json['modelOutput']) ? null : $this->populateResultModelOutputs($json['modelOutput']),
            'inputAssessment' => !isset($json['inputAssessment']) ? null : $this->populateResultGuardrailAssessmentMap($json['inputAssessment']),
            'outputAssessments' => !isset($json['outputAssessments']) ? null : $this->populateResultGuardrailAssessmentListMap($json['outputAssessments']),
        ]);
    }

    private function populateResultGuardrailUsage(array $json): GuardrailUsage
    {
        return new GuardrailUsage([
            'topicPolicyUnits' => (int) $json['topicPolicyUnits'],
            'contentPolicyUnits' => (int) $json['contentPolicyUnits'],
            'wordPolicyUnits' => (int) $json['wordPolicyUnits'],
            'sensitiveInformationPolicyUnits' => (int) $json['sensitiveInformationPolicyUnits'],
            'sensitiveInformationPolicyFreeUnits' => (int) $json['sensitiveInformationPolicyFreeUnits'],
            'contextualGroundingPolicyUnits' => (int) $json['contextualGroundingPolicyUnits'],
        ]);
    }

    private function populateResultGuardrailWordPolicyAssessment(array $json): GuardrailWordPolicyAssessment
    {
        return new GuardrailWordPolicyAssessment([
            'customWords' => $this->populateResultGuardrailCustomWordList($json['customWords']),
            'managedWordLists' => $this->populateResultGuardrailManagedWordList($json['managedWordLists']),
        ]);
    }

    private function populateResultImageBlock(array $json): ImageBlock
    {
        return new ImageBlock([
            'format' => (string) $json['format'],
            'source' => $this->populateResultImageSource($json['source']),
        ]);
    }

    private function populateResultImageSource(array $json): ImageSource
    {
        return new ImageSource([
            'bytes' => isset($json['bytes']) ? base64_decode((string) $json['bytes']) : null,
        ]);
    }

    private function populateResultMessage(array $json): Message
    {
        return new Message([
            'role' => (string) $json['role'],
            'content' => $this->populateResultContentBlocks($json['content']),
        ]);
    }

    /**
     * @return string[]
     */
    private function populateResultModelOutputs(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $a = isset($item) ? (string) $item : null;
            if (null !== $a) {
                $items[] = $a;
            }
        }

        return $items;
    }

    private function populateResultPerformanceConfiguration(array $json): PerformanceConfiguration
    {
        return new PerformanceConfiguration([
            'latency' => isset($json['latency']) ? (string) $json['latency'] : null,
        ]);
    }

    private function populateResultPromptRouterTrace(array $json): PromptRouterTrace
    {
        return new PromptRouterTrace([
            'invokedModelId' => isset($json['invokedModelId']) ? (string) $json['invokedModelId'] : null,
        ]);
    }

    private function populateResultReasoningContentBlock(array $json): ReasoningContentBlock
    {
        return new ReasoningContentBlock([
            'reasoningText' => empty($json['reasoningText']) ? null : $this->populateResultReasoningTextBlock($json['reasoningText']),
            'redactedContent' => isset($json['redactedContent']) ? base64_decode((string) $json['redactedContent']) : null,
        ]);
    }

    private function populateResultReasoningTextBlock(array $json): ReasoningTextBlock
    {
        return new ReasoningTextBlock([
            'text' => (string) $json['text'],
            'signature' => isset($json['signature']) ? (string) $json['signature'] : null,
        ]);
    }

    private function populateResultS3Location(array $json): S3Location
    {
        return new S3Location([
            'uri' => (string) $json['uri'],
            'bucketOwner' => isset($json['bucketOwner']) ? (string) $json['bucketOwner'] : null,
        ]);
    }

    private function populateResultTokenUsage(array $json): TokenUsage
    {
        return new TokenUsage([
            'inputTokens' => (int) $json['inputTokens'],
            'outputTokens' => (int) $json['outputTokens'],
            'totalTokens' => (int) $json['totalTokens'],
        ]);
    }

    private function populateResultToolResultBlock(array $json): ToolResultBlock
    {
        return new ToolResultBlock([
            'toolUseId' => (string) $json['toolUseId'],
            'content' => $this->populateResultToolResultContentBlocks($json['content']),
            'status' => isset($json['status']) ? (string) $json['status'] : null,
        ]);
    }

    private function populateResultToolResultContentBlock(array $json): ToolResultContentBlock
    {
        return new ToolResultContentBlock([
            'json' => empty($json['json']) ? null : $this->populateResultDocument($json['json']),
            'text' => isset($json['text']) ? (string) $json['text'] : null,
            'image' => empty($json['image']) ? null : $this->populateResultImageBlock($json['image']),
            'document' => empty($json['document']) ? null : $this->populateResultDocumentBlock($json['document']),
            'video' => empty($json['video']) ? null : $this->populateResultVideoBlock($json['video']),
        ]);
    }

    /**
     * @return ToolResultContentBlock[]
     */
    private function populateResultToolResultContentBlocks(array $json): array
    {
        $items = [];
        foreach ($json as $item) {
            $items[] = $this->populateResultToolResultContentBlock($item);
        }

        return $items;
    }

    private function populateResultToolUseBlock(array $json): ToolUseBlock
    {
        return new ToolUseBlock([
            'toolUseId' => (string) $json['toolUseId'],
            'name' => (string) $json['name'],
            'input' => $this->populateResultDocument($json['input']),
        ]);
    }

    private function populateResultVideoBlock(array $json): VideoBlock
    {
        return new VideoBlock([
            'format' => (string) $json['format'],
            'source' => $this->populateResultVideoSource($json['source']),
        ]);
    }

    private function populateResultVideoSource(array $json): VideoSource
    {
        return new VideoSource([
            'bytes' => isset($json['bytes']) ? base64_decode((string) $json['bytes']) : null,
            's3Location' => empty($json['s3Location']) ? null : $this->populateResultS3Location($json['s3Location']),
        ]);
    }
}
