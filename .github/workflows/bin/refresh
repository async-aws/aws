#!/usr/bin/env php
<?php

$rootDir = __DIR__ . '/../../..';
if (!file_exists($rootDir . '/manifest.json')) {
    echo "Unable to find the `manifest.json` script in `../../..`.\n";
    exit(1);
}

function console_log(string $message): void
{
    echo $message.PHP_EOL;
}

function call(string $command): array
{
    $output = [];
    exec($command, $output, $return);
    if ($return !== 0) {
        console_log('Command "'.$command.'" failed.');

        exit(1);
    }

    return $output;
}

/**
 * FETCH last SDK version
 */
console_log('Fetching last SDK version');
$package = json_decode(file_get_contents('https://repo.packagist.org/p2/aws/aws-sdk-php.json'), true);
$versions = $package['packages']['aws/aws-sdk-php'];
usort($versions, static function(array $a, array $b) {
    return version_compare($b['version_normalized'], $a['version_normalized']);
});
$lastVersion = $versions[0]['version'];
console_log('Last AWS version is '.$lastVersion);

/**
 * FETCH current generated version
 */
$manifest = json_decode(file_get_contents($rootDir . '/manifest.json'), true);
$currentVersion = $manifest['variables']['${LATEST}'];

console_log('Current version is '.$currentVersion);
if (version_compare($currentVersion, $lastVersion, '>=')) {
    console_log('Nothing to do.');
    exec('git reset --hard');
    exit;
}

$currentVersion = '3.204.0';


/**
 * Regenerate code
 */
console_log('Regenerate code with version '.$lastVersion);
$manifest['variables']['${LATEST}'] = $lastVersion;
\file_put_contents($rootDir . '/manifest.json', \json_encode($manifest, \JSON_PRETTY_PRINT | \JSON_UNESCAPED_SLASHES));
passthru($rootDir.'/generate --all', $return);
if ($return !== 0) {
    console_log('Code generation failed.');
    exit(1);
}

/**
 * Check if something changed
 */
$output = call('git diff --numstat  src/');

if (empty($output)) {
    console_log('Nothing changed.');
    exec('git reset --hard');
    exit;
}
console_log('Code changed');
$services = [];
$hasChange = false;
foreach ($output as $line) {
    $file = explode("\t", $line)[2];
    if (preg_match('#/CHANGELOG\.md$#', $file)) {
        continue;
    }

    $parts = explode('/', $file);
    if ('Service' === $parts[1] ?? null) {
        $service = $parts[2];
    } elseif (('Core' === $parts[1] ?? null) && ('Sts' === $parts[3] ?? null)) {
        $service = 'Sts';
    } else {
        continue;
    }

    if (!isset($services[$service])) {
        $services[$service] = false;
    }

    if ($services[$service]) {
        continue;
    }

    $fileChanges = call('git diff --no-color -U0 '.escapeshellarg($file));
    foreach ($fileChanges as $lineChange) {
        if (!$lineChange) {
            continue;
        }
        if ($lineChange[0] !== '-' && $lineChange[0] !== '+') {
            continue;
        }
        if (in_array(substr($lineChange, 0, 3), ['---', '+++'], true)) {
            continue;
        }
        $lineChange = trim(substr($lineChange, 1));
        if ('*' !== $lineChange[0] ?? null) {
            $services[$service] = $hasChange = true;
            break;
        }
    }
}

/**
 * Fetching AWS Changes
 */
$changesByService = [];
if ($hasChange) {
    $changes = [];
    foreach ($versions as $version) {
        if ($version['version'] === $currentVersion) {
            break;
        }
        console_log('Fetching CHANGELOG for '. $version['version']);

        $versionContent = @file_get_contents('https://raw.githubusercontent.com/aws/aws-sdk-php/'.$lastVersion.'/.changes/'.$version['version']);
        if (false === $versionContent) {
            continue;
        }

        $changes = array_merge($changes, json_decode($versionContent, true));
    }

    foreach ($changes as $change) {
        $sanitizedService = preg_replace('[^a-z0-9]', '', strtolower($change['category']));
        $changesByService[$sanitizedService][] = $change;
    }
}

/**
 * Generating ChangeLog
 */
foreach ($services as $service => $hasChange) {
    $awsServiceNames = array_merge([$service], $manifest['services'][$service]['alternative-names'] ?? []);
    $newLines = [];
    foreach ($awsServiceNames as $awsServiceName) {
        $sanitizedService = preg_replace('[^a-z0-9]', '', strtolower($awsServiceName));
        if ($hasChange) {
            if (!isset($changesByService[$sanitizedService])) {
                continue;
            }
            foreach ($changesByService[$sanitizedService] as $change) {
                $newLines[] = sprintf('- AWS %s: %s', $change['type'], $change['description']);
            }
        } else {
            $newLines[] = '- AWS enhancement: Documentation updates.';
        }
    }

    if (empty($newLines)) {
        console_log('/!\ No entry in changelog for service '.$service);
        $newLines[] = '- AWS api-change: TODO';
    }

    console_log('Generating CHANGELOG for '. $service);
    if ($service === 'Sts') {
        $changeLogPath = $rootDir.'/src/Core/CHANGELOG.md';
    } else {
        $changeLogPath = $rootDir.'/src/Service/'.$service.'/CHANGELOG.md';
    }
    $changeLog = explode("\n", file_get_contents($changeLogPath));
    $nrSection = false;
    $fixSection = false;
    foreach ($changeLog as $index => $line) {
        if ($line === '## NOT RELEASED') {
            $nrSection = true;
            continue;
        }
        if (!$nrSection) {
            continue;
        }
        if (strpos($line, '## ') === 0) {
            break;
        }
        if ($line === '### Added') {
            $fixSection = true;
            continue;
        }
        if (!$fixSection) {
            continue;
        }
        if (strpos($line, '### ') === 0) {
            break;
        }

        if ($line !== '' && false !== $index = array_search($line, $newLines, true)) {
            array_splice($newLines, $index, 1);
        }
    }

    if (empty($newLines)) {
        console_log('duplicate entry in CHANGELOG '.$service);
        continue;
    }

    if (!$nrSection) {
        array_splice($changeLog, 2, 0, array_merge([
            '## NOT RELEASED',
            '',
            '### Added',
            '',
        ], $newLines, ['']));
    } elseif (!$fixSection) {
        array_splice($changeLog, $index, 0, array_merge([
            '### Added',
            '',
        ], $newLines, ['']));
    } else {
        array_splice($changeLog, $index - 1, 0, $newLines);
    }

    file_put_contents($changeLogPath, implode("\n", $changeLog));
}

// forward version to .github action
echo PHP_EOL, '::set-output name=last::'.$lastVersion, PHP_EOL;
